// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: conversations.sql

package queries

import (
	"context"
	"time"
)

const getConversationByID = `-- name: GetConversationByID :one
SELECT id, user_id, title, created_at, updated_at FROM conversations WHERE id = ?
`

func (q *Queries) GetConversationByID(ctx context.Context, id string) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversationByID, id)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConversationsByUserID = `-- name: GetConversationsByUserID :many
SELECT id, user_id, title, created_at, updated_at
FROM conversations
WHERE user_id = ?
ORDER BY updated_at DESC
LIMIT ? OFFSET ?
`

type GetConversationsByUserIDParams struct {
	UserID string
	Limit  int64
	Offset int64
}

func (q *Queries) GetConversationsByUserID(ctx context.Context, arg GetConversationsByUserIDParams) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, getConversationsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Conversation
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveConversation = `-- name: SaveConversation :exec
INSERT INTO conversations (id, user_id, title, created_at, updated_at) VALUES (?, ?, ?, ?, ?)
ON CONFLICT (id) DO UPDATE SET
    user_id    = EXCLUDED.user_id,
    title      = EXCLUDED.title,
    created_at = EXCLUDED.created_at,
    updated_at = EXCLUDED.updated_at
`

type SaveConversationParams struct {
	ID        string
	UserID    string
	Title     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) SaveConversation(ctx context.Context, arg SaveConversationParams) error {
	_, err := q.db.ExecContext(ctx, saveConversation,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
