// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: messages.sql

package queries

import (
	"context"
)

const getMessagesByConversationID = `-- name: GetMessagesByConversationID :many
SELECT id, role, content FROM messages WHERE conversation_id = ? ORDER BY id
`

type GetMessagesByConversationIDRow struct {
	ID      string
	Role    int64
	Content string
}

func (q *Queries) GetMessagesByConversationID(ctx context.Context, conversationID string) ([]GetMessagesByConversationIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByConversationID, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesByConversationIDRow
	for rows.Next() {
		var i GetMessagesByConversationIDRow
		if err := rows.Scan(&i.ID, &i.Role, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMessage = `-- name: SaveMessage :exec
INSERT INTO messages (id, conversation_id, role, content) VALUES (?, ?, ?, ?)
ON CONFLICT (id) DO UPDATE SET
    conversation_id = EXCLUDED.conversation_id,
    role            = EXCLUDED.role,
    content         = EXCLUDED.content
`

type SaveMessageParams struct {
	ID             string
	ConversationID string
	Role           int64
	Content        string
}

func (q *Queries) SaveMessage(ctx context.Context, arg SaveMessageParams) error {
	_, err := q.db.ExecContext(ctx, saveMessage,
		arg.ID,
		arg.ConversationID,
		arg.Role,
		arg.Content,
	)
	return err
}
