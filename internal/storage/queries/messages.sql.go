// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: messages.sql

package queries

import (
	"context"
	"time"
)

const deleteMessagesByConversationID = `-- name: DeleteMessagesByConversationID :exec
DELETE FROM messages WHERE conversation_id = ?
`

func (q *Queries) DeleteMessagesByConversationID(ctx context.Context, conversationID string) error {
	_, err := q.db.ExecContext(ctx, deleteMessagesByConversationID, conversationID)
	return err
}

const getMessagesByConversationID = `-- name: GetMessagesByConversationID :many
SELECT id, role, content, created_at, updated_at FROM messages WHERE conversation_id = ? ORDER BY created_at
`

type GetMessagesByConversationIDRow struct {
	ID        string
	Role      int64
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetMessagesByConversationID(ctx context.Context, conversationID string) ([]GetMessagesByConversationIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByConversationID, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesByConversationIDRow
	for rows.Next() {
		var i GetMessagesByConversationIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMessage = `-- name: SaveMessage :exec
INSERT INTO messages (id, conversation_id, role, content, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)
ON CONFLICT (id) DO UPDATE SET
    conversation_id = EXCLUDED.conversation_id,
    role            = EXCLUDED.role,
    content         = EXCLUDED.content,
    created_at      = EXCLUDED.created_at,
    updated_at      = EXCLUDED.updated_at
`

type SaveMessageParams struct {
	ID             string
	ConversationID string
	Role           int64
	Content        string
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) SaveMessage(ctx context.Context, arg SaveMessageParams) error {
	_, err := q.db.ExecContext(ctx, saveMessage,
		arg.ID,
		arg.ConversationID,
		arg.Role,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
